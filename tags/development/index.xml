<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Dmitry M - Veridis Quo</title>
    <link>https//dmitrym0.github.com/tags/development/</link>
    <description>Recent content in Development on Dmitry M - Veridis Quo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 12 Jan 2020 00:00:00 -0800</lastBuildDate>
    
	<atom:link href="https//dmitrym0.github.com/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift optionals for Objective-C programmers</title>
      <link>https//dmitrym0.github.com/posts/swift-optionals-for-objc-programmers/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 -0800</pubDate>
      
      <guid>https//dmitrym0.github.com/posts/swift-optionals-for-objc-programmers/</guid>
      <description>I&amp;rsquo;m trying my hand at some iOS programming after being away for a while. At this point it does not make sense to start a new project in Objective-C so I started in Swift.
Overall, Swift is very readable and I&amp;rsquo;m fairly productive right out of the gate. One of the new language features that not familiar though, is Optionals.
Due to Objective-C&amp;rsquo;s, C lineage you could do things like this:</description>
    </item>
    
    <item>
      <title>Safari App Extensions; migrating from .safariextz</title>
      <link>https//dmitrym0.github.com/posts/safari-app-extensions-migrating-from-safariextz/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 -0700</pubDate>
      
      <guid>https//dmitrym0.github.com/posts/safari-app-extensions-migrating-from-safariextz/</guid>
      <description>I’ve dabbled with a Safari extension for a project on and off for a while. For Safari 12, I read that .safariextz-style extensions are no longer supported. I went forth to investigate what changed and how I could port my old extension to Safari 12.
The short story is that the packaging has changed, but the bulk of the existing extension should just work once new conventions are adopted. I imagine the new changes are spurred by Apple’s desire to unify distribution — new extensions are wrapped as a mac application, require a signature and are distributed through the Mac App Store.</description>
    </item>
    
    <item>
      <title>How to check for X-Send-File (or X-Accel-Redirect)</title>
      <link>https//dmitrym0.github.com/posts/how-to-check-for-x-sendfile/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 -0700</pubDate>
      
      <guid>https//dmitrym0.github.com/posts/how-to-check-for-x-sendfile/</guid>
      <description>Some web requests should not be handled by the application framework. Requests hitting a dynamic API endpoint should be processed by application (in my case typically Ruby on Rails). Static assets (such as files) should be served by the webserver, bypassing Ruby on Rails completely.
Why?
There are a couple of reasons.
The biggest one is performance. NGINX and Apache are significantly better and faster at serving files than a Ruby process.</description>
    </item>
    
    <item>
      <title>Efficient commit workflow with tig</title>
      <link>https//dmitrym0.github.com/posts/tig-cheat-sheet/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 -0700</pubDate>
      
      <guid>https//dmitrym0.github.com/posts/tig-cheat-sheet/</guid>
      <description>One of the recommended source control practices is to commit frequently, and often. I prefer to keep my commits terse and focused, however in practice I’m working on a couple related but independent things in parallel. At commit time, I prefer to tease loosely related things apart and commit them separately.
One way to do that is with the interactive git-add facility that can be invoked with git add -p:</description>
    </item>
    
  </channel>
</rss>