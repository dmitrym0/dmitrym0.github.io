<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Dmitry M</title>
        <link>https://dmitrym0.github.io/</link>
        <description>Dmitry M blog thing</description>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <language>en</language>
        <pubDate>Mon, 08 Oct 2018 14:22:00 -0700</pubDate>
        <lastBuildDate>Mon, 08 Oct 2018 14:22:00 -0700</lastBuildDate>
        <atom:link href="https://dmitrym0.github.com/index.xml" rel="self" type="application/rss+xml"/>
	<item>
		<title><![CDATA[Safari App Extensions; migrating from .safariextz]]></title>
		<description><![CDATA[<h1>Safari App Extensions; migrating from .safariextz</h1>
<p>I’ve dabbled with a Safari extension for a project on and off for a while. For Safari 12, I read that .safariextz-style extensions are no longer supported. I went forth to investigate what changed and how I could port my old extension to Safari 12.</p>
<p>The short story is that the packaging has changed, but the bulk of the existing extension should just work once new conventions are adopted. I imagine the new changes are spurred by Apple’s desire to unify distribution — new extensions are wrapped as a mac application, require a signature and are distributed through the Mac App Store.</p>
<p>I went looking for documentation and stumbled upon the <a href="https://developer.apple.com/videos/play/wwdc2016/214/">Extending your App with Safari App Extensions - WWDC 2016 - Videos - Apple Developer</a> presentation which laid everything out. </p>
<p>There are three major parts:</p>
<ul>
<li>Content blocking</li>
<li>Modifying page behaviour</li>
<li>Extending Safari UI</li>
</ul>
<p>The video starts out describing how to develop the new Safari App Extensions. You need Xcode and dev certificate. The new thing here is that Safari App Extensions are distributed as part of a macOS application and therefore can invoke native code from that application. Neat.</p>
<p>The presenters then go into some specific examples of functionality that Safari App Extensions can have.</p>
<p>They mention that <em>content blocking</em> is built upon a model at compile time (?) so there’s no run time evaluation. This is to achieve required speed. The content blocking  API is consistent across macOS and iOS. One interesting tidbit is that  the content blockers don’t get access to individual requests, only the “content blocking” model does. This is for privacy reasons.</p>
<p>The second part was about <em>Modifying page behavior</em>, really the part I was looking for.  The important info here is that CSS/JS from your old extensions simply transition to the new app. These assets need to be described in the app’s Info.plist, for example for JS you’d use <code>SFSafariContentScript</code>[0]. There’s a new messaging API for the JS to talk to the native code. </p>
<p>Final, third demo was related to <em>Extending Safari UI</em>. Safari App Extension can extend Safari’s UI via popovers that house <code>NSView</code>s. It sounded like it’d be relatively easy to extend your app’s existing NSViews to show up in Safari. Not something I’m interested, but nevertheless cool.</p>
<p>I went searching for more WWDC notes, and haven’t found much[1]. It’s an excellent resource.</p>
<p>Looks like converting to the new format isn’t so bad. Plus Apple has an <a href="https://developer.apple.com/documentation/safariservices/safari_app_extensions/converting_a_legacy_safari_extension_to_a_safari_app_extension">official conversion how to</a>.</p>
<p>[0]: More keys in the Info.plist in the <a href="https://developer.apple.com/documentation/safariservices/safari_app_extensions/safari_app_extension_info_property_list_keys/about_safari_app_extension_default_keys">official documentation</a></p>
<p>[1]: I did find this though:<a href="https://procrastinative.ninja/2018/07/02/wwdc-2018-notes/">WWDC 2018 Notes — Procrastinative Ninja</a></p>]]></description>
		<link>https://dmitrym0.github.io/Safari%20App%20Extensions%3B%20migrating%20from%20.safariextz.html</link>
		<pubDate>Mon, 08 Oct 2018 14:22:00 -0700</pubDate>
		<guid isPermaLink="true">https://dmitrym0.github.io/Safari%20App%20Extensions%3B%20migrating%20from%20.safariextz.html</guid>
	</item>
	<item>
		<title><![CDATA[How to check for X-Send-File (or X-Accel-Redirect)]]></title>
		<description><![CDATA[<h1>How to check for X-Send-File (or X-Accel-Redirect)</h1>
<p>Some web requests should not be handled by the application framework. Requests hitting a dynamic API endpoint should be processed by application (in my case typically Ruby on Rails). Static assets (such as files) should be served by the webserver, bypassing Ruby on Rails completely.</p>
<p>Why?  </p>
<p>There are a couple of reasons.</p>
<p>The biggest one is performance. NGINX and Apache are significantly better and faster at serving files than a Ruby process. It’s the whole reason for their existence.</p>
<p>Secondly, leaving Ruby processes out of serving static files frees that process up to serve dynamic requests.</p>
<p>For example, here Ruby is serving a font file. It ties the ruby process up for over half a second for no reason.</p>
<pre><code>I, [2018-09-02T22:50:21.284547 ]  INFO — : Sent file ff133.ttf (0.3ms)
I, [2018-09-02T22:50:21.284839 ]  INFO — : Completed 200 OK in 633ms (ActiveRecord: 61.4ms)</code></pre>
<p>It should be noted, that webservers typically have hundreds of threads serving requests, whereas the application (Ruby on Rails) has on the order of tens of processes. So tying a ruby process up to serve files is wasteful.</p>
<p>The alternative is <a href="https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/">XSendfile | NGINX</a>. Once the application determines that it does not need to serve the file it can signal the webserver to take over. </p>
<p>I always struggle to remember how  to identify requests served by Rails vs requests served by the web server.</p>
<p>Turns out it’s pretty simple.</p>
<p>If the response contains <code>X-Request-ID</code> header, then it was served by Rails. Otherwise it was served by the webserver.</p>
<p><a href="https://mattbrictson.com/accelerated-rails-downloads">Matt Bricston</a> has more info.</p>]]></description>
		<link>https://dmitrym0.github.io/How%20to%20check%20for%20X-Send-File%20%28or%20X-Accel-Redirect%29.html</link>
		<pubDate>Tue, 11 Sep 2018 11:08:00 -0700</pubDate>
		<guid isPermaLink="true">https://dmitrym0.github.io/How%20to%20check%20for%20X-Send-File%20%28or%20X-Accel-Redirect%29.html</guid>
	</item>
	<item>
		<title><![CDATA[efficient commit workflow with tig]]></title>
		<description><![CDATA[<h1>efficient commit workflow with tig</h1>
<p>One of the recommended source control practices is to <a href="http://stackoverflow.com/questions/107264/how-often-to-commit-changes-to-source-control">commit frequently, and often</a>.   I prefer to keep my commits terse and focused, however in practice I’m working on a couple related but independent things in parallel. At commit time, I prefer to tease loosely related things apart and commit them separately. </p>
<p>One way to do that is with the interactive git-add facility that can be invoked with <code>git add -p</code>:</p>
<img src="images/885D7D62-4C88-470D-9745-DA5202080E5B.png">
<p>It’s a lovely little interface:</p>
<ul>
<li>file name is shown at the top of the output</li>
<li>location of the change set is shown</li>
<li>the prompt is asking whether I want to stage the change (“y”),  ignore the changes this file (“d”) and various other obscure options.</li>
</ul>
<p>This process works for the majority of my commit needs. It allows me to review every change before staging it to ensure that only necessary changes get pushed to the central repo.</p>
<p>My main issue with this process is that it’s too linear. When the number of changes exceeds a certain threshold I have trouble remembering what functionality I’m currently committing. I can’t easily inspect the existing staged hunks. The process becomes cumbersome. </p>
<p>This is where <a href="http://jonas.nitro.dk/tig/">tig</a>, a <em>text-mode interface for Git</em> comes in. I’m a huge fan of console tools because they are incredibly fast and <em>tig</em> is no exception. </p>
<p>Upon launching <em>tig</em> you’re presented with the following view:</p>
<img src="images/52EF34AA-B701-4F45-8CF3-639718C7A16B.png">
<p>I’m currently interested in the “unstaged changes”. Hitting <code>enter</code> shows a diff between HEAD and current working directory. </p>
<p>But we’re interested more in the stage view that can be activated by hitting <code>S</code> (case matters!):</p>
<img src="images/40535893-241B-465B-BDBB-1E547CD9F686.png">
<p>This view should be familiar to anyone who has used <code>git status</code>.  This main view can be navigated with arrow keys. Hitting <code>enter</code> on a file name  will show a secondary window with a diff. This view can be navigated with the <code>j</code> and <code>k</code> keys (vi-like).</p>
<img src="images/845B9D78-DC30-4AFF-9504-B8EFE7E2BF0D.png">
<p>At this point, we can select individuals lines to stage with the <code>1</code> key, or hit <code>u</code> to stage the whole file.  Individual lines can be staged when there’s some cruft you don’t want to commit - such as debugging statements.</p>
<p>When all changes have been staged, you can hit  <code>C</code> to commit from inside <em>tig</em>, or exit (<code>q</code>) and commit as you normally would from command line.</p>
<p>Here’s a small <a href="http://ricostacruz.com/cheatsheets/tig.html">Tig cheatsheet</a>  for reference.</p>]]></description>
		<link>https://dmitrym0.github.io/efficient%20commit%20workflow%20with%20tig.html</link>
		<pubDate>Thu, 30 Aug 2018 14:50:00 -0700</pubDate>
		<guid isPermaLink="true">https://dmitrym0.github.io/efficient%20commit%20workflow%20with%20tig.html</guid>
	</item>
	<item>
		<title><![CDATA[XTerra Switched outlet]]></title>
		<description><![CDATA[<h1>XTerra Switched outlet</h1>
<p>For some reason <a href="https://www.google.ca/search?q=why+are+truck+12v+always+on">truck and SUV 12v outlets are always hot</a>.  This is true in my wife’s F150 and my 2010 Nissan XTerra. This is a bit of annoyance since I’d like to use a bluetooth transmitter to connect my iPhone to the radio. Thankfully, it’s fairly easy to add a second, switched outlet in the XTerra.</p>
<p>The short  of it is:</p>
<ul>
<li>acquire OEM cigarette outlet </li>
<li>wire it via an add-a-fuse </li>
</ul>
<p>As far as electrical mods go this one is very mild and simple. The biggest difficulty for me was managing to sneak a bolt behind the glove box to ground the connection.</p>
<p><strong>Please note. This mod involves electricity. Electricity is dangerous.  It could destroy your vehicle and potentially kill you.</strong> </p>
<img src="images/213587C8-4B2D-4469-A568-C658712B8D74.png">
<h2>Step 1: Acquire all of the parts</h2>
<p>This is not a complete list since I’ve had some of this stuff already.</p>
<p>What’ you’ll need:</p>
<ul>
<li>Nissan OEM part 253369B92A, the ring protector. This is the plastic piece that clips into the dash and holds the metal part of the cigarette lighter. Can be purchased at <a href="https://nissanpartswarehouse.com/">NissanPartsWarehouse.com</a></li>
<li>Nissan OEM part 25339ZV60A, the metal part of the cigarette lighter. Can be purchased <a href="https://nissanpartswarehouse.com/">NissanPartsWarehouse.com</a>.</li>
<li>One add-a-fuse</li>
<li>Some automotive wiring. 18 gauge wiring should be fine. </li>
<li>(1) Ring terminal for the ground wire. </li>
<li>(2) Blade terminals to connect on the back of the cigarette lighters</li>
</ul>
<img src="images/IMG_7683.JPG">
<h2>Step 2: Putting it all together</h2>
<p>This is actually quite straightforward.</p>
<ol>
<li>
<p>Add a necessary length (about a foot?) to the add-a-fuse wire and crimp it. Add a blade terminal to the other end. This is the hot wire. It will connect to the centre pin of the cigarette lighter.</p>
</li>
<li>
<p>For the ground wire, take a short length, put a ring terminal on one end, and a blade terminal on the other.</p>
</li>
<li>
<p>Connect blade terminals to the cigarette lighter. Centre is hot and goes to the fuse box. Side pin is ground.  I should’ve probably used two different colours. </p>
<img src="images/IMG_7684.JPG">
</li>
<li>
<p>Thread the wires through the exposed mounting hole. DO NOT push the cigarette lighter all the way in until you’ve confirmed that everything is wired correctly. </p>
<img src="images/IMG_7685.JPG">
</li>
<li>
<p>On the right, plug your add-a-fuse into the heated seats fuse position. It’s unused and is only live when the engine is turned on (not my picture)</p>
<img src="images/lighter004.jpg">
</li>
<li>
<p>On the left, ground the connection to a metal post directly behind cigarette lighter hole. This will be difficult because it’s tight in there. I used a small nut and bolt. </p>
</li>
<li>
<p>Finally test with a multimeter to ensure that everything is correct and pop the cigarette lighter all the way in.</p>
<img src="images/IMG_7687.JPG">
</li>
</ol>
<h2>Closing thoughts</h2>
<p>Overall, not a difficult mod at all. Requires some wiring knowledge. The total cost was about $20 for the OEM cigarette lighter parts, another $10 for add a fuse and the rest of the miscellanea I had at home. Not too bad. </p>
<p>The majority of the info came from this post: <a href="http://www.thenewx.org/forum/12-electrical/55411-added-switched-dash-outlet.html">Added A Switched Dash Outlet - Second Generation Nissan Xterra Forums (2005+)</a></p>]]></description>
		<link>https://dmitrym0.github.io/XTerra%20Switched%20outlet.html</link>
		<pubDate>Thu, 23 Mar 2017 17:04:00 -0700</pubDate>
		<guid isPermaLink="true">https://dmitrym0.github.io/XTerra%20Switched%20outlet.html</guid>
	</item>
	<item>
		<title><![CDATA[ncdu - ncurses disk usage]]></title>
		<description><![CDATA[<h1>ncdu - ncurses disk usage</h1>
<img src="images/C4E2CBC7-B430-42C7-A97B-29C687793DA3.png">
<p>At some point harddrive space was cheap, but with the advent of SSDs and cheap “Cloud VMs” that is no longer the case. For example, the cheapest VM on VULTR is $5/month and has a 15 gig SSD drive. It's suddenly very important to maximize drive usage again. This is where <a href="https://dev.yorhel.nl/ncdu">ncdu</a> comes in. It displays a nice ncurses interface that visualizes the usage breakdown.</p>
<p>So useful key bindings:</p>
<ul>
<li><code>?</code> - help</li>
<li><code>g</code> - to switch display modes</li>
<li><code>d</code> - to kill a subdirectory tree</li>
</ul>
<p>There's a commercial app for Mac that I use and love (because my Mac only has a 256 SSD) called <a href="https://daisydiskapp.com/">DaisyDisk</a>.</p>
<p>/devops</p>]]></description>
		<link>https://dmitrym0.github.io/ncdu%20-%20ncurses%20disk%20usage.html</link>
		<pubDate>Wed, 07 Dec 2016 19:03:00 -0800</pubDate>
		<guid isPermaLink="true">https://dmitrym0.github.io/ncdu%20-%20ncurses%20disk%20usage.html</guid>
	</item>
    </channel>
</rss>
